<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 6.2.3.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div><!-- Generated by Doxygen 1.8.11 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__zll.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Zll</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gae890f5d8f0754425d0fd4f208e729eef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gae890f5d8f0754425d0fd4f208e729eef">emberZllFormNetwork</a> (<a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *networkInfo, int8_t radioTxPower)</td></tr>
<tr class="separator:gae890f5d8f0754425d0fd4f208e729eef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0bc61b9d557dbdd31322eb02f87081dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga0bc61b9d557dbdd31322eb02f87081dd">emberZllJoinTarget</a> (const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *targetNetworkInfo)</td></tr>
<tr class="separator:ga0bc61b9d557dbdd31322eb02f87081dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga470007551ee33a27b61251cee2924678"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga470007551ee33a27b61251cee2924678">emberZllSetSecurityStateWithoutKey</a> (const <a class="el" href="structEmberZllInitialSecurityState.htm">EmberZllInitialSecurityState</a> *securityState)</td></tr>
<tr class="separator:ga470007551ee33a27b61251cee2924678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga08d23d25544dbad5ad4b285a1dd474e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga08d23d25544dbad5ad4b285a1dd474e8">emberZllSetInitialSecurityState</a> (const <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *networkKey, const <a class="el" href="structEmberZllInitialSecurityState.htm">EmberZllInitialSecurityState</a> *securityState)</td></tr>
<tr class="separator:ga08d23d25544dbad5ad4b285a1dd474e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabbbe392c97ff423bc211d4a018b8d7b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gabbbe392c97ff423bc211d4a018b8d7b5">emberZllStartScan</a> (uint32_t channelMask, int8_t radioPowerForScan, <a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType)</td></tr>
<tr class="separator:gabbbe392c97ff423bc211d4a018b8d7b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80fb76dc8ef0ca2bde70a2addc136b29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga80fb76dc8ef0ca2bde70a2addc136b29">emberZllSetRxOnWhenIdle</a> (uint32_t durationMs)</td></tr>
<tr class="separator:ga80fb76dc8ef0ca2bde70a2addc136b29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb2ce4c3240892fc956099c3bd7fd352"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gafb2ce4c3240892fc956099c3bd7fd352">emberZllCancelRxOnWhenIdle</a> (void)</td></tr>
<tr class="separator:gafb2ce4c3240892fc956099c3bd7fd352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3311e65d5f19b7575b49a4feff16138"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gaf3311e65d5f19b7575b49a4feff16138">emberZllSetRadioIdleMode</a> (<a class="el" href="group__ember__types.htm#ga83a36f460015735ad85a72da48869d02">EmberRadioPowerMode</a> mode)</td></tr>
<tr class="separator:gaf3311e65d5f19b7575b49a4feff16138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga85757b4b307b7e2e9b220f067a8715a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga85757b4b307b7e2e9b220f067a8715a0">emberZllNetworkFoundHandler</a> (const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *networkInfo, const <a class="el" href="structEmberZllDeviceInfoRecord.htm">EmberZllDeviceInfoRecord</a> *deviceInfo)</td></tr>
<tr class="separator:ga85757b4b307b7e2e9b220f067a8715a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a32a0408b13c5e7e058dd9e9d63b712"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga8a32a0408b13c5e7e058dd9e9d63b712">emberZllScanCompleteHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga8a32a0408b13c5e7e058dd9e9d63b712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e4d8b32dda6b8f896a69164f7e5f23f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga8e4d8b32dda6b8f896a69164f7e5f23f">emberZllAddressAssignmentHandler</a> (const <a class="el" href="structEmberZllAddressAssignment.htm">EmberZllAddressAssignment</a> *addressInfo)</td></tr>
<tr class="separator:ga8e4d8b32dda6b8f896a69164f7e5f23f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3cbd754adb810d2e6d60adb121fa342b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga3cbd754adb810d2e6d60adb121fa342b">emberZllTouchLinkTargetHandler</a> (const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *networkInfo)</td></tr>
<tr class="separator:ga3cbd754adb810d2e6d60adb121fa342b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae08595457d77d2050d35bfc8a8fdc56f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gae08595457d77d2050d35bfc8a8fdc56f">emberZllGetTokenStackZllData</a> (<a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *token)</td></tr>
<tr class="separator:gae08595457d77d2050d35bfc8a8fdc56f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga485188c22ff8a4259ac70ca4b40ef31a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga485188c22ff8a4259ac70ca4b40ef31a">emberZllGetTokenStackZllSecurity</a> (<a class="el" href="structEmberTokTypeStackZllSecurity.htm">EmberTokTypeStackZllSecurity</a> *token)</td></tr>
<tr class="separator:ga485188c22ff8a4259ac70ca4b40ef31a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabf0e7be763d8771dd67097bfcabac057"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gabf0e7be763d8771dd67097bfcabac057">emberZllGetTokensStackZll</a> (<a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *data, <a class="el" href="structEmberTokTypeStackZllSecurity.htm">EmberTokTypeStackZllSecurity</a> *security)</td></tr>
<tr class="separator:gabf0e7be763d8771dd67097bfcabac057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c143f47489d72eb484391e64f23544b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga9c143f47489d72eb484391e64f23544b">emberZllSetTokenStackZllData</a> (<a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *token)</td></tr>
<tr class="separator:ga9c143f47489d72eb484391e64f23544b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab6152f9d518c24b4fe31756a6487df7d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gab6152f9d518c24b4fe31756a6487df7d">emberIsZllNetwork</a> (void)</td></tr>
<tr class="separator:gab6152f9d518c24b4fe31756a6487df7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga44d4ce9a4219756aff3f1a19e9f03188"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga44d4ce9a4219756aff3f1a19e9f03188">emberZllSetNonZllNetwork</a> (void)</td></tr>
<tr class="separator:ga44d4ce9a4219756aff3f1a19e9f03188"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab962d6563c26e41b8d42da073d14a1c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__zll__types.htm#ga9eb2c50e5fed86cfd75fd1718ec3b65b">EmberZllPolicy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gaab962d6563c26e41b8d42da073d14a1c">emberZllGetPolicy</a> (void)</td></tr>
<tr class="separator:gaab962d6563c26e41b8d42da073d14a1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84715425d60ee15fdc74b96fc3c730d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga84715425d60ee15fdc74b96fc3c730d8">emberZllSetPolicy</a> (<a class="el" href="group__zll__types.htm#ga9eb2c50e5fed86cfd75fd1718ec3b65b">EmberZllPolicy</a> policy)</td></tr>
<tr class="separator:ga84715425d60ee15fdc74b96fc3c730d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ee32e128ddf73893f3087ac7390582e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga1ee32e128ddf73893f3087ac7390582e">emberSetLogicalAndRadioChannel</a> (uint8_t channel)</td></tr>
<tr class="separator:ga1ee32e128ddf73893f3087ac7390582e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga448e9b721a17f879cd68727f2bfc3e81"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga448e9b721a17f879cd68727f2bfc3e81">emberGetLogicalChannel</a> (void)</td></tr>
<tr class="separator:ga448e9b721a17f879cd68727f2bfc3e81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad887a8a8b7a934fc35dab72c0ec4db18"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gad887a8a8b7a934fc35dab72c0ec4db18">emberSetZllNodeType</a> (<a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType)</td></tr>
<tr class="separator:gad887a8a8b7a934fc35dab72c0ec4db18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65e3c0bce7b53216d63eafba23bc847e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga65e3c0bce7b53216d63eafba23bc847e">emberSetZllAdditionalState</a> (uint16_t mask)</td></tr>
<tr class="separator:ga65e3c0bce7b53216d63eafba23bc847e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4fd73c3916f1278bdaf7b16a8a7e8ee2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#ga4fd73c3916f1278bdaf7b16a8a7e8ee2">emberZllOperationInProgress</a> (void)</td></tr>
<tr class="separator:ga4fd73c3916f1278bdaf7b16a8a7e8ee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe85f1aef1cb55c50b74a9fd5f2128fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__zll.htm#gabe85f1aef1cb55c50b74a9fd5f2128fc">emberZllRxOnWhenIdleGetActive</a> (void)</td></tr>
<tr class="separator:gabe85f1aef1cb55c50b74a9fd5f2128fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>See <a class="el" href="zll-api_8h.htm">zll-api.h</a> for source code. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gae890f5d8f0754425d0fd4f208e729eef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllFormNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *&#160;</td>
          <td class="paramname"><em>networkInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>radioTxPower</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This will set the device type as a router or end device (depending on the passed nodeType) and setup a distributed commissioning network with the passed parameters. If panId is 0xFFFF, a random PAN ID will be generated. If extendedPanId is set to all F's, then a random extended pan ID will be generated. If channel is 0xFF, then channel 11 will be used. If all F values are passed for PAN Id or Extended PAN ID then the randomly generated values will be returned in the passed structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkInfo</td><td>A pointer to an <a class="el" href="structEmberZllNetwork.htm" title="Information about the ZLL network and specific device that responded to a ZLL scan request...">EmberZllNetwork</a> struct indicating the network parameters to use when forming the network. If random values are requested, the stack's randomly generated values will be returned in the structure. </td></tr>
    <tr><td class="paramname">radioTxPower</td><td>the radio output power at which a node is to operate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded, or why it failed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0bc61b9d557dbdd31322eb02f87081dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllJoinTarget </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *&#160;</td>
          <td class="paramname"><em>targetNetworkInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will cause the device to send a NWK start or join to the target device and cause the remote AND local device to start operating on a network together. If the local device is a factory new end device then it will send a touchlink NWK start to the target requesting that the target generate new network parameters, otherwise, if the local device is a router, then it will form a new touchlink network itself. If the device is not factory new then the local device will send a NWK join request using the current network parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">targetNetworkInfo</td><td>A pointer to an <a class="el" href="structEmberZllNetwork.htm" title="Information about the ZLL network and specific device that responded to a ZLL scan request...">EmberZllNetwork</a> structure that indicates the info about what device to send the NWK start/join request to. This information must have previously been returned from a touchlink scan.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded, or why it failed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga470007551ee33a27b61251cee2924678"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllSetSecurityStateWithoutKey </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberZllInitialSecurityState.htm">EmberZllInitialSecurityState</a> *&#160;</td>
          <td class="paramname"><em>securityState</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will update touchlink security token information. Unlike emberZllSetInitialSecurityState, this can be called while a network is already established. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">securityState</td><td>The security configuration to be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation suceeded, or why it failed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga08d23d25544dbad5ad4b285a1dd474e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllSetInitialSecurityState </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>networkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structEmberZllInitialSecurityState.htm">EmberZllInitialSecurityState</a> *&#160;</td>
          <td class="paramname"><em>securityState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will cause the device to setup the security information used in its network. It must be called prior to forming, starting, or joining a network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkKey</td><td>is a pointer to an <a class="el" href="structEmberKeyData.htm" title="This data structure contains the key data that is passed into various other functions. ">EmberKeyData</a> structure containing the value for the network key. If the value is set to all F's, then a random network key will be generated. </td></tr>
    <tr><td class="paramname">securityState</td><td>The security configuration to be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded, or why it failed. </dd></dl>

</div>
</div>
<a class="anchor" id="gabbbe392c97ff423bc211d4a018b8d7b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllStartScan </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>radioPowerForScan</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will initiate a touchlink network scan on all the specified channels. Results will be returned in <a class="el" href="group__zll.htm#ga85757b4b307b7e2e9b220f067a8715a0" title="This call is fired when a touchlink network scan finds a touchlinkable device, which may be joined on...">emberZllNetworkFoundHandler()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelMask</td><td>indicating the range of channels to scan. </td></tr>
    <tr><td class="paramname">radioPowerForScan</td><td>the radio output power used for the scan requests. </td></tr>
    <tr><td class="paramname">nodeType</td><td>the the node type of the local device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded, or why it failed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga80fb76dc8ef0ca2bde70a2addc136b29"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllSetRxOnWhenIdle </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>durationMs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will change the mode of the radio so that the receiver is on when the device is idle. This permits a touchlink target to receive incoming scan requests and an initiator to communicate with a target before the network is established. The idle mode will be set to 'Rx On' until either the duration expires or is set to zero, or unless emberZllCancelRxOnWhenIdle is called. </p>
<p>Note that, if the device joins or attempts to join a network during this period, then the Stack will suspend the special touchlink radio idle mode, and the Stack's radio idle mode will revert to the joined default appropriate to the node type. If, however, the device leaves, or the join fails, then the touchlink radio idle mode will be resumed, provided that the duration timer has not expired.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">durationMs</td><td>The duration in milliseconds for which to set the idle mode to 'Rx On'. A duration of 0xffffffff indicates an indefinite duration, so that the device will always be able to respond to touchlink requests when not joined.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded or why it failed. A return value of EMBER_INVALID_CALL indicates that the special touchlink radio idle mode is active, but has been suspended by the Stack, because the device has joined a network, or is in the process of joining. </dd></dl>

</div>
</div>
<a class="anchor" id="gafb2ce4c3240892fc956099c3bd7fd352"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllCancelRxOnWhenIdle </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will cancel the special touchlink radio idle mode immediately, without reverting the Stack's radio idle mode to its original setting. </p>

</div>
</div>
<a class="anchor" id="gaf3311e65d5f19b7575b49a4feff16138"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllSetRadioIdleMode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga83a36f460015735ad85a72da48869d02">EmberRadioPowerMode</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will set the default radio power mode directly (This is the radio state when the device is not actively transmitting, and may be either EMBER_RADIO_POWER_MODE_RX_ON or EMBER_RADIO_POWER_MODE_RX_OFF.) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>is the power mode to set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga85757b4b307b7e2e9b220f067a8715a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllNetworkFoundHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *&#160;</td>
          <td class="paramname"><em>networkInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structEmberZllDeviceInfoRecord.htm">EmberZllDeviceInfoRecord</a> *&#160;</td>
          <td class="paramname"><em>deviceInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call is fired when a touchlink network scan finds a touchlinkable device, which may be joined on either a centralized or a distributed network, or may not be joined at all. The network information will be returned to the application for processing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkInfo</td><td>is a pointer to an <a class="el" href="structEmberZllNetwork.htm" title="Information about the ZLL network and specific device that responded to a ZLL scan request...">EmberZllNetwork</a> struct containing the Zigbee and touchlink specific information about the discovered network. </td></tr>
    <tr><td class="paramname">deviceInfo</td><td>is a pointer to an <a class="el" href="structEmberZllDeviceInfoRecord.htm" title="Information discovered during a ZLL scan about the ZLL device&#39;s endpoint information. ">EmberZllDeviceInfoRecord</a> struct containing the device specific info. This pointer may be NULL, indicating the device has either 0 sub-devices, or more than 1 sub-devices. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8a32a0408b13c5e7e058dd9e9d63b712"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllScanCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call is fired when a touchlink network scan is complete. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the operation succeeded, or why it failed. If the status is not <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message. ">EMBER_SUCCESS</a>, the application should not attempt to start or join a network returned via <a class="el" href="group__zll.htm#ga85757b4b307b7e2e9b220f067a8715a0" title="This call is fired when a touchlink network scan finds a touchlinkable device, which may be joined on...">emberZllNetworkFoundHandler</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8e4d8b32dda6b8f896a69164f7e5f23f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllAddressAssignmentHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberZllAddressAssignment.htm">EmberZllAddressAssignment</a> *&#160;</td>
          <td class="paramname"><em>addressInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call is fired when network and group addresses are assigned to a remote mode in a network start or network join request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">addressInfo</td><td>is a pointer to an <a class="el" href="structEmberZllAddressAssignment.htm" title="Network and group address assignment information. ">EmberZllAddressAssignment</a> struct containing the address assignment information. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3cbd754adb810d2e6d60adb121fa342b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllTouchLinkTargetHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberZllNetwork.htm">EmberZllNetwork</a> *&#160;</td>
          <td class="paramname"><em>networkInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call is fired when the device is a target of a touch link. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkInfo</td><td>is a pointer to an <a class="el" href="structEmberZllNetwork.htm" title="Information about the ZLL network and specific device that responded to a ZLL scan request...">EmberZllNetwork</a> struct containing the Zigbee and touchlink specific information about the initiator. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gae08595457d77d2050d35bfc8a8fdc56f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllGetTokenStackZllData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *&#160;</td>
          <td class="paramname"><em>token</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call reads the touchlink Stack data token. </p>

</div>
</div>
<a class="anchor" id="ga485188c22ff8a4259ac70ca4b40ef31a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllGetTokenStackZllSecurity </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberTokTypeStackZllSecurity.htm">EmberTokTypeStackZllSecurity</a> *&#160;</td>
          <td class="paramname"><em>token</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call reads the touchlink Stack security token. </p>

</div>
</div>
<a class="anchor" id="gabf0e7be763d8771dd67097bfcabac057"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllGetTokensStackZll </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberTokTypeStackZllSecurity.htm">EmberTokTypeStackZllSecurity</a> *&#160;</td>
          <td class="paramname"><em>security</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call reads both the touchlink Stack data and security tokens. </p>

</div>
</div>
<a class="anchor" id="ga9c143f47489d72eb484391e64f23544b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllSetTokenStackZllData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberTokTypeStackZllData.htm">EmberTokTypeStackZllData</a> *&#160;</td>
          <td class="paramname"><em>token</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call sets the touchlink Stack data token. </p>

</div>
</div>
<a class="anchor" id="gab6152f9d518c24b4fe31756a6487df7d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberIsZllNetwork </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call returns whether or not the network is a touchlink network, that is, a distributed network formed by touchlink commissioning, and supporting touchlink-compliant address and group id assignment. </p>

</div>
</div>
<a class="anchor" id="ga44d4ce9a4219756aff3f1a19e9f03188"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZllSetNonZllNetwork </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will alter the touchlink data token to reflect the fact that the network is non-touchlink-compliant. </p>

</div>
</div>
<a class="anchor" id="gaab962d6563c26e41b8d42da073d14a1c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__zll__types.htm#ga9eb2c50e5fed86cfd75fd1718ec3b65b">EmberZllPolicy</a> emberZllGetPolicy </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will get the policy that enables or disables touchlink processing, and to enable or disable stealing a non-factory-new device. </p>

</div>
</div>
<a class="anchor" id="ga84715425d60ee15fdc74b96fc3c730d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberZllSetPolicy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__zll__types.htm#ga9eb2c50e5fed86cfd75fd1718ec3b65b">EmberZllPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will set the policy to enable or disable touchlink processing, and to enable or disable stealing a non-factory-new device. </p>

</div>
</div>
<a class="anchor" id="ga1ee32e128ddf73893f3087ac7390582e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetLogicalAndRadioChannel </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will set the current logical and physical channel. </p>

</div>
</div>
<a class="anchor" id="ga448e9b721a17f879cd68727f2bfc3e81"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t emberGetLogicalChannel </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will get the current logical channel. </p>

</div>
</div>
<a class="anchor" id="gad887a8a8b7a934fc35dab72c0ec4db18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberSetZllNodeType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will set the default node type for a factory new device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">The</td><td>node type to be set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga65e3c0bce7b53216d63eafba23bc847e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberSetZllAdditionalState </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>mask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call will set additional capability bits in the touchlink state. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">A</td><td>mask with the bits to be set or cleared. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4fd73c3916f1278bdaf7b16a8a7e8ee2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberZllOperationInProgress </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function is called to indicate whether a touchlink network operation is in progress, that is, a network start or a network join. </p>

</div>
</div>
<a class="anchor" id="gabe85f1aef1cb55c50b74a9fd5f2128fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberZllRxOnWhenIdleGetActive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function is called to indicate whether the special touchlink radio idle mode is active, i.e. whether the radio receiver will remain on when the device is not transmitting, when the device is not on a network. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 6.2.3.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
